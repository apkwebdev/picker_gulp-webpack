// === Функция резинового изменения размера flexible_size = fs ===
// $bpl - lower breakpoint
// $bpu - upper breakpoint = Это фактически та точка, на которую делается медиазапрос
// $fsl - lower value of the flexible size
// $fsu - upper value of the flexible size = Это размер текста или элемента в точке делаемого медиазапроса

// Данная функция является базовой для расчёта резинового размера, все входные данные вносятся с размерностью px! 
@function fsb($bpl, $bpu, $fsl, $fsu) { 
  @return calc(#{$fsl} + #{($fsu - $fsl) / 1px} * (100vw - #{$bpl}) / #{($bpu - $bpl) / 1px});
}
// Смысл её работы прост. Мы хотим, чтобы при размере окна браузера, например, 768px размер нашего элемента (или шрифта) был бы равен, например, 15px. А при размере окна браузера, например, 1024px размер нашего элемента (или шрифта) был бы равен, например, 20px. При этом при размере окна браузера больше 768px, но меньше 1024px, размер элемента (или шрифта) был бы больше 15px, но меньше 20px и эта зависимость была бы линейной. Мы напишем в этом случае font-size: fsb(768px, 1024px, 15px, 20px). Всё! Мы получили резиновый размер текста, причём на всём интервале размеров окна браузера от 0px до "много-много"px.

// Та же функция, только все данные вносим без размерностей! Для того же примера запишем font-size: fsbw(768, 1024, 15, 20)
@function fsbw($bpl, $bpu, $fsl, $fsu) {
  @return calc(#{$fsl * 1px} + #{$fsu - $fsl} * (100vw - #{$bpl * 1px}) / #{$bpu - $bpl});
}

// Функция fsc получается из fsb путём принятия, что размер элемента изменится во столько же раз, во сколько изменится размер окна браузера ($scr - это глобальная переменная равная 0.75, смотреть в ./settings/presets/vars.scss). При этом третия параметр при желании можно поменять! 
@function fsc($bpu, $fsu, $k: $scr) { 
  $fsl: $fsu * $k;
  $bpl: $bpu * $scr;
  @return fsb($bpl, $bpu, $fsl, $fsu);
}
// Рассмотрим наш пример. Так получилось,что 768px/1024px = 15px/20px = 0.75. Это как раз тот случай, когда нам пригодится такой вариант функции font-size: fsc(1024px, 20px)

// Однако более частая ситуация, когда размер шрифта с изменением размера окна браузера меняется не тка быстро, медленнее уменьшается. И именно этот случай самый, пожалуй востребованный. Поэтому и была сделана следующая модификация: 
@function fst($bpu, $fsu, $k: $str) { 
  $fsl: $fsu * $k;
  $bpl: $bpu * $scr;
  @return fsb($bpl, $bpu, $fsl, $fsu);
}
// Здесь глобальная переменная $str (смотреть в ./settings/presets/vars.scss) получается как отношение двух размеров шрифта (текста, flexible size for text) в двух важных размерах окна браузера относящихся друг к другу как 0.75!!! Это важно понимать. Однако, сетка брейкпоинтов мной подобрана как раз с таким соотношением. 


// === Расчёт ширины блока main-wrap по номеру выбранного шаблона ===
@function main-width($sections: sma) {
  $correction: 0px;
  @if $sections == sma {
    @return $container-page - 2 * $container-page-padding - $sidebar-width - $aside-width - $correction;
  }
  @else if $sections == sm {
    @return $container-page - 2 * $container-page-padding - $sidebar-width - $correction; 
  }
  @else if $sections == ma {
    @return $container-page - 2 * $container-page-padding - $aside-width - $correction; 
  }
  @else if $sections == m {
    @return $container-page - 2 * $container-page-padding - $correction; 
  }
  @else {
    @return 100%; 
  }
}